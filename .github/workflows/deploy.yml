#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: Deploy

on:
  push:               # Run on push
    paths-ignore:     # File patterns to ignore
    - '**.md'         # Ignore changes to *.md files
    - '**.tar.gz'     # Ignore database updates

  pull_request:       # Run on pull-request
    paths-ignore:     # File-patterns to ignore
    - '**.md'         # Ignore changes to *.md files
    - '**.tar.gz'     # Ignore database updates

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "2.1.0"
  QT_VERSION_LINUX: 6.7.1
  QT_VERSION_MACOS: 6.7.1
  QT_VERSION_WINDOWS: 6.7.1
  EXECUTABLE: "Serial-Studio"
  APPLICATION: "Serial Studio"
  UNIXNAME: "serial-studio"
  QML_DIR: "../../app/qml"
  PUBLISHER: "Alex Spataru"
  QT_MODULES: qtserialport qtconnectivity qtpositioning qtlocation
  CORES: 16

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

jobs:
  #
  # Linux build
  #
  build-linux:
    runs-on: ubuntu-20.04
    name: 'üêß Ubuntu 20.04'
    steps:
    - name: 'üß∞ Checkout'
      uses: actions/checkout@v4
      
    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION_LINUX}}
        modules: ${{env.QT_MODULES}}
        cache: true
        install-deps: 'true'

    - name: '‚öôÔ∏è Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev libxcb-image0-dev libxcb-util0-dev libxcb-cursor-dev libssl-dev libudev-dev libusb-1.0-0-dev libssl-dev

    - name: '‚öôÔ∏è Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true
      
    - name: 'üöß Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DCMAKE_BUILD_TYPE=Release

    - name: 'üöß Build application'
      run: |
        cd build
        cmake --build . --config Release -j 10

    - name: '‚öôÔ∏è Install linuxdeploy'
      run: |
        cd "build/app"
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-plugin-qt-x86_64.AppImage

    - name: 'üì¶ Create AppImage'
      run: |
        cd "build/app"
        export QML_SOURCES_PATHS="${{env.QML_DIR}}"
        export QMAKE=/home/runner/work/${{env.EXECUTABLE}}/Qt/${{env.QT_VERSION_LINUX}}/gcc_64/bin/qmake
        export PATH=/home/runner/work/${{env.EXECUTABLE}}/Qt/${{env.QT_VERSION_LINUX}}/gcc_64/libexec:$PATH
        ./linuxdeploy-x86_64.AppImage --appdir AppDir -e ${{env.UNIXNAME}} -i ../../app/deploy/linux/${{env.UNIXNAME}}.png -d ../../app/deploy/linux/${{env.UNIXNAME}}.desktop --plugin qt --output appimage
        rm linuxdeploy-x86_64.AppImage
        rm linuxdeploy-plugin-qt-x86_64.AppImage
        mv *.AppImage ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
          
    - name: 'üì§ Upload artifact: AppImage'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage

  #
  # Windows build
  #
  build-windows:
    runs-on: windows-latest
    name: 'üßä Windows'
    steps:
    - run: git config --global core.autocrlf input
    - name: 'üß∞ Checkout'
      uses: actions/checkout@v4

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION_WINDOWS}}
        modules: ${{env.QT_MODULES}}
        cache: 'true'
      
    - name: '‚öôÔ∏è Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true

    - name: 'üöß Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_BUILD_TYPE=Release
        
    - name: 'üöß Build application'
      run: |
        cd build
        cmake --build . --config Release -j 10

    - name: 'üì¶ Package application'
      run: |
        cd build
        cpack --verbose
        mv *.exe ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
        mv ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe ../
        
    - name: 'üì§ Upload artifact: NSIS installer'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe

  # Upload continuous build
  upload:
      name: 'üóÇ Create release and upload artifacts'
      needs:
        - build-mac-arm64
        - build-mac-intel
        - build-windows
        - build-linux
      runs-on: ubuntu-latest
      steps:
      - name: 'üì• Download artifacts'
        uses: actions/download-artifact@v4
      - name: 'üóÇ Inspect directory after downloading artifacts'
        run: ls -alFR
      - name: 'üöÄ Create release and upload artifacts'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            sudo apt-get update
            sudo apt-get install libfuse2
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-arm64.dmg
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Intel.dmg
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe

